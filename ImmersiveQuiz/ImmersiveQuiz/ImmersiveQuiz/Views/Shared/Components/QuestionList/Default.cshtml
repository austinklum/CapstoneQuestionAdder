@model ImmersiveQuiz.Models.QuestionLocationViewModel
<br />
<div class="accordion" id="location-@Model.LocationId">
    @foreach (var item in Model.Questions)
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="question-heading-@item.QuestionId">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#question-collapse-@item.QuestionId" aria-expanded="true" aria-controls="question-collapse-@item.QuestionId">
                    @Html.DisplayFor(modelItem => item.Content)
                </button>
            </h2>
            <div id="question-collapse-@item.QuestionId" class="accordion-collapse collapse" aria-labelledby="question-heading-@item.QuestionId">
                <div class="accordion-body">
                    <p>
                        @{
                            string disabled = "";
                            if (item.Answers.Count >= 6)
                            {
                                disabled = "d-none";
                            }
                        }
                        <a class="badge large-badge bg-success text-light @disabled" asp-action="Create" asp-controller="Answers" asp-route-id="@item.QuestionId">Add Answer</a> |
                        <a class="badge large-badge bg-primary text-light" asp-action="Edit" asp-controller="Questions" asp-route-id="@item.QuestionId">Edit</a>
                        <a class="badge large-badge bg-danger text-light" asp-action="Delete" asp-controller="Questions" asp-route-id="@item.QuestionId">Delete</a>
                    </p>
                    @await Component.InvokeAsync("AnswerList", new { SearchQuestionId = item.QuestionId.ToString(), SearchAnswerContent = "" })
                </div>
            </div>
        </div>
    }
</div>